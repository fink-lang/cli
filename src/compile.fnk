{readFileSync, writeFileSync, mkdirSync, existsSync} = import 'fs'
{dirname} = import 'path'

{parse} = import '@fink/larix/parser.fnk'
{generate} = import '@fink/loxia/generate.fnk'
{decode} = import '@fink/std-lib/str.fnk'
{is_empty} = import '@fink/std-lib/iter.fnk'

{get_files} = import './files.fnk'
{logger} = import './logging.fnk'

{warn} = logger _



transform = fn source, filename, options:
  ast = parse source, filename

  match ast:
    {errors: is_empty ?}:
      generate
        ast, filename, source
        rec:
          babel: {babelrc: false, configFile: false}
          ...options
    else:
      {errors: ast.errors}



compile = fn filename, options:
  buff = readFileSync filename
  source = decode buff, 'utf-8'
  transform source, filename, options



output_to_dir = fn {code, src_path, out_path}:
  dir = dirname out_path
  match false:
    existsSync dir:
      mkdirSync dir, {recursive: true}
      warn 'created ${dir}'

  writeFileSync out_path, code

  warn 'compiled ${src_path} -> ${out_path}'
  out_path



output_code = fn {stdout}, item:
  match item.out_path:
    false: stdout.write '${item.code}\n'
    else: output_to_dir item
  item



compile_all = fn proc, src, out_dir=false, ignore=false, options={}:
  files = get_files src, out_dir, ignore, options.module_ext

  pipe files:
    map {src_path, out_path, rel_path}:
      compiled = compile src_path, options

      match compiled:
        {errors: is_empty ?}:
          {code} = compiled
          item = {src_path, out_path, rel_path, code}
          output_code proc, item
        else:
          {errors} = compiled
          {src_path, out_path, rel_path, errors}


