{readFileSync, writeFileSync, mkdirSync, existsSync} = import `fs`
{dirname} = import `path`

{parse} = import `@fink/larix`
{generate} = import `@fink/loxia`

convert_source_map = import `convert-source-map`


{get_files} = import `./files`

{logger} = import './logging'

{warn} = logger()


transform = fn source, filename:
  fink_ast = parse:: source, filename
  generate:: fink_ast, filename, source


compile = fn filename:
  buff = readFileSync:: filename
  source = buff.toString:: `utf8`
  transform:: source, filename


output_to_dir = fn {code, src_path, out_path, rel_path}:
  dir = dirname:: out_path
  match false:
    existsSync:: dir:
      mkdirSync:: dir, {recursive: true}
      warn:: `created ${dir}`

  writeFileSync:: out_path, code

  warn:: `compiled ${src_path} -> ${out_path}`
  out_path


output_code = fn {stdout}, item:
  match item.out_path:
    null: stdout.write:: `${item.code}\n`
    else: output_to_dir:: item


add_source_map_inline = fn {code, map: source_map}:
  converter = convert_source_map.fromObject:: source_map
  comment = converter.toComment()
  '${code}\n${comment}'


compile_all = fn proc, src, out_dir=null, ignore=null, source_maps=false:
  files = get_files:: src, out_dir, ignore

  processed = pipe files:
    map {src_path, out_path, rel_path}:
      compiled = compile:: src_path

      code = match source_maps:
        'inline': add_source_map_inline:: compiled
        else: compiled.code

      {code, src_path, out_path, rel_path}

    map item:
      output_code:: proc, item

    fold item, cntr=0:
      cntr + 1

  warn:: `\nprocessed ${processed} file(s)`
