{rmdirSync, writeFileSync} = import 'fs'

{describe, it, expect, mock_fn, to_match_snapshot, was_called_with, to_equal} = import '@fink/jest'


jest.mock '@fink/loxia', fn:
  dict:
    generate: mock_fn fn:
      dict:
        code: 'test-code',
        map: 'test-map'


jest.mock './logging', fn:
  dict:
    logger: fn: dict:
      warn: mock_fn()
      error: mock_fn()


{readdirSync, statSync} = import 'fs'

{compile_all} = import './compile'


describe compile_all, fn:

  it 'compiles file to stdout', fn:
    stdout = {write: mock_fn()}

    [...result] = compile_all {stdout}, ['./src/compile.test.fnk']

    expect
      stdout.write
      was_called_with 'test-code\n'


  it 'compiles files to out-dir', fn:
    stdout = {write: mock_fn()}
    rmdirSync './build/test', {recursive: true}

    [...result] = compile_all {stdout}, ['./src'], './build/test'

    files = readdirSync './build/test'

    expect
       files
       to_match_snapshot


  it 'ignores files', fn:
    stdout = {write: mock_fn()}
    rmdirSync './build/test', {recursive: true}

    [...result] = compile_all {stdout}, ['./src'], './build/test', './src/*.test.fnk'

    files = readdirSync './build/test'

    expect
       files
       to_match_snapshot


  it 'compiles file with inline source-maps', fn:
    stdout = {write: mock_fn()}

    [...result] = compile_all {stdout}, ['./src/compile.test.fnk'], null, null, 'inline'

    expect
      stdout.write
      was_called_with '
        test-code
        //# sourceMappingURL=data:application/json;charset=utf-8;base64,InRlc3QtbWFwIg==
      '

  it 'handles parse errors', fn:
    stdout = {write: mock_fn()}
    writeFileSync './build/test-file.fnk', 'foo bar ['

    {errors} = pipe compile_all {stdout}, ['./build/test-file.fnk']:
      find {errors}:
        match errors:
          []: true
          else: false

    expect
      errors.length
      to_equal 1


