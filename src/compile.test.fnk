{rmdirSync, writeFileSync} = import 'fs'

{describe, it, expect, mock_fn, to_match_snapshot, was_called_with, to_equal} = import '@fink/jest'


jest.mock './logging', fn:
  dict:
    logger: fn: dict:
      warn: mock_fn()
      error: mock_fn()


{readdirSync} = import 'fs'

{compile_all} = import './compile'


describe compile_all, fn:

  it 'compiles files to out-dir', fn:
    stdout = {write: mock_fn()}
    rmdirSync './build/test', {recursive: true}

    [...result] = compile_all {stdout}, ['./src'], './build/test'

    files = readdirSync './build/test'

    expect
       files
       to_match_snapshot


  it 'ignores files', fn:
    stdout = {write: mock_fn()}
    rmdirSync './build/test', {recursive: true}

    [...result] = compile_all
      {stdout}
      ['./src'], './build/test', './src/*.test.fnk'

    files = readdirSync './build/test'

    expect
       files
       to_match_snapshot


  it 'compiles as es6 module with inline source-maps to stdout', fn:
    stdout = {write: mock_fn()}
    writeFileSync
      './build/test-file.fnk'
      `
        {foo} = import '@fink/test'
        bar = foo * 2
      `

    [...result] = compile_all
      {stdout}
      ['./build/test-file.fnk'], null, null
      {source_maps: 'inline'}

    expect
      stdout.write
      was_called_with '
        import { foo } from "@fink/test";
        export const bar = foo * 2;
        //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkL3Rlc3QtZmlsZS5mbmsiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBQyxHQUFEO0FBQ0EsYUFBQSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQVoiLCJzb3VyY2VzQ29udGVudCI6WyJ7Zm9vfSA9IGltcG9ydCAnQGZpbmsvdGVzdCdcbmJhciA9IGZvbyAqIDJcbiJdfQ==
      '


  it 'compiles as es6 module without source-maps to stdout', fn:
    stdout = {write: mock_fn()}
    writeFileSync
      './build/test-file.fnk'
      `
        {foo} = import '@fink/test'
        bar = foo * 2
      `

    [...result] = compile_all
      {stdout}
      ['./build/test-file.fnk'], null, null
      {source_maps: false}

    expect
      stdout.write
      was_called_with '
        import { foo } from "@fink/test";
        export const bar = foo * 2;
      '

  it 'compiles as cjs module without source-maps to stdout', fn:
    stdout = {write: mock_fn()}
    writeFileSync
      './build/test-file.fnk'
      `
        {foo} = import '@fink/test'
        bar = foo * 2
      `

    [...result] = compile_all
      {stdout}
      ['./build/test-file.fnk'], null, null
      {source_maps: false, module_type: 'cjs'}

    expect
      stdout.write
      was_called_with `
        const {
          foo
        } = require("@fink/test");

        const bar = foo * 2;
        exports.bar = bar;
      `


  it 'handles parse errors', fn:
    stdout = {write: mock_fn()}
    writeFileSync './build/test-file.fnk', 'foo bar ['

    {errors} = pipe compile_all {stdout}, ['./build/test-file.fnk']:
      find {errors}:
        match errors:
          []: true
          else: false

    expect
      errors.length
      to_equal 1


