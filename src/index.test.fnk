{describe, it, expect, mock, mock_fn, was_called_with} = import '@fink/jest/test.fnk'


mock './compile.fnk', fn:
  dict:
    compile_all: mock_fn fn: [{ errors: []}]


mock_warn = mock_fn _

mock './logging.fnk', fn:
  dict:
    logger: fn: dict:
      warn: mock_warn
      error: mock_fn _


{compile_all} = import './compile.fnk'
{main, error_exit_code} = import './index.fnk'


describe main, fn:

  it 'compiles file without out-dir', fn:
    proc = dict:
      exit: mock_fn _
      argv: ['node', 'fnk', '--src', './src/index.fnk']

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src/index.fnk'], false, false
        {source_maps: false, module_type: 'esm', module_ext: '.js'}


  it 'compiles dir to out-dir', fn:
    proc = dict:
      exit: mock_fn _
      argv: ['node', 'fnk', '--src', './src', '--out-dir', './build/test']

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], './build/test', false
        {source_maps: false, module_type: 'esm', module_ext: '.js'}


  it 'ignores files', fn:
    proc = dict:
      exit: mock_fn _
      argv: ['node', 'fnk', '--src', './src', '--ignore', './src/*.test.*']

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], false, './src/*.test.*'
        {source_maps: false, module_type: 'esm', module_ext: '.js'}


  it 'compiles with source maps', fn:
    proc = dict:
      exit: mock_fn _
      argv: list:
        'node', 'fnk'
        '--src', './src'
        '--ignore', './src/*.test.*'
        '--source-maps', 'inline'

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], false, './src/*.test.*'
        {source_maps: 'inline', module_type: 'esm', module_ext: '.js'}

    expect
      mock_warn
      was_called_with '\nprocessed 1 file(s)'


  it 'compiles as es6 module', fn:
    proc = dict:
      exit: mock_fn _
      argv: list:
        'node', 'fnk'
        '--src', './src'
        '--ignore', './src/*.test.*'
        '--module-type', 'esm'
        '--module-ext', '.mjs'

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], false, './src/*.test.*'
        {source_maps: false, module_type: 'esm', module_ext: '.mjs'}

    expect
      mock_warn
      was_called_with '\nprocessed 1 file(s)'


  it 'handles errors', fn:
    compile_all.mockImplementation fn:
      [{errors: [{error: 'test-error', stack: 'test-stack'}]}]

    proc = dict:
      argv: ['node', 'fnk', '--src', './src', '--ignore', './src/*.test.*'],
      exit: mock_fn _

    main proc

    expect
      proc.exit
      was_called_with error_exit_code

    expect
      mock_warn
      was_called_with '\nprocessed 1 file(s)'
