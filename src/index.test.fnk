{readdirSync, statSync} = import 'fs'

{describe, it, expect, mock_fn, was_called_with, to_throw} = import '@fink/jest'


jest.mock './compile', fn:
  dict:
    compile_all: mock_fn fn: [{ errors: []}]


mock_warn = mock_fn()

jest.mock './logging', fn:
  dict:
    logger: fn: dict:
      warn: mock_warn
      error: mock_fn()


{compile_all} = import './compile'
{main, error_exit_code} = import './index'


describe main, fn:

  it 'compiles file without out-dir', fn:
    proc = dict:
      exit: mock_fn()
      argv: [null, null, '--src', './src/index.fnk']

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src/index.fnk'], null, null
        {source_maps: false, module_type: 'cjs'}


  it 'compiles dir to out-dir', fn:
    proc = dict:
      exit: mock_fn()
      argv: [null, null, '--src', './src', '--out-dir', './build/test']

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], './build/test', null
        {source_maps: false, module_type: 'cjs'}


  it 'ignores files', fn:
    proc = dict:
      exit: mock_fn()
      argv: [null, null, '--src', './src', '--ignore', './src/*.test.*']

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], null, './src/*.test.*'
        {source_maps: false, module_type: 'cjs'}


  it 'compiles with source maps', fn:
    proc = dict:
      exit: mock_fn()
      argv: list:
        null, null,
        '--src', './src',
        '--ignore', './src/*.test.*',
        '--source-maps', 'inline'

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], null, './src/*.test.*'
        {source_maps: 'inline', module_type: 'cjs'}

    expect
      mock_warn
      was_called_with '\nprocessed 1 file(s)'


  it 'compiles as es6 module', fn:
    proc = dict:
      exit: mock_fn()
      argv: list:
        null, null,
        '--src', './src',
        '--ignore', './src/*.test.*',
        '--module-type', 'mjs'

    main proc

    expect
      compile_all
      was_called_with
        proc
        ['./src'], null, './src/*.test.*'
        {source_maps: false, module_type: 'mjs'}

    expect
      mock_warn
      was_called_with '\nprocessed 1 file(s)'


  it 'handles errors', fn:
    compile_all.mockImplementation fn:
      [{errors: [{error: 'test-error', stack: 'test-stack'}]}]

    proc = dict:
      argv: [null, null, '--src', './src', '--ignore', './src/*.test.*'],
      exit: mock_fn()

    main proc

    expect
      proc.exit
      was_called_with error_exit_code

    expect
      mock_warn
      was_called_with '\nprocessed 1 file(s)'
