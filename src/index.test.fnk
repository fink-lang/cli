{readdirSync, statSync} = import `fs`

{describe, it, expect, mock_fn, to_be_called_with, to_throw} = import `@fink/jest`


jest.mock:: `./compile`, fn:
  {
    compile_all: mock_fn:: fn: null
  }

jest.mock:: `./logging`, fn:
  {
   logger: fn: {error: mock_fn()}
  }


{compile_all} = import `./compile`
{main} = import `./index`


describe:: main, fn:

  it:: `compiles file without out-dir`, fn:
    proc = {argv: [null, null, `--src`, `./src/index.fnk`]}

    main:: proc

    expect::
      compile_all
      to_be_called_with:: proc, [`./src/index.fnk`], null, null, false


  it:: `compiles dir to out-dir`, fn:
    proc = {argv: [null, null, `--src`, `./src`, `--out-dir`, `./build/test`]}

    main:: proc

    expect::
      compile_all
      to_be_called_with:: proc, [`./src`], `./build/test`, null, false


  it:: `ignores files`, fn:
    proc = {argv: [null, null, `--src`, `./src`, `--ignore`, `./src/*.test.*`]}

    main:: proc

    expect::
      compile_all
      to_be_called_with:: proc, [`./src`], null, `./src/*.test.*`, false


  it:: `compiles with source maps`, fn:
    proc = {
      argv: [
        null, null,
        `--src`, `./src`,
        `--ignore`, `./src/*.test.*`,
        '--source-maps', 'inline'
      ]
    }

    main:: proc

    expect::
      compile_all
      to_be_called_with:: proc, [`./src`], null, `./src/*.test.*`, 'inline'


  it:: `handles errors`, fn:
    compile_all.mockImplementation:: fn: null()
    proc = {
      argv: [null, null, `--src`, `./src`, `--ignore`, `./src/*.test.*`],
      exit: mock_fn:: null
    }

    main:: proc

    expect::
      proc.exit
      to_be_called_with:: -1


