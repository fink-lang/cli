{readdirSync, statSync} = import 'fs'
{join, dirname, basename, relative} = import 'path'
minimatch = import 'minimatch'
{ends_with} = import '@fink/std-lib/str.fnk'
{map, filter, flatten} = import '@fink/std-lib/iter.fnk'



walk = fn dir:
  pipe readdirSync dir, {withFileTypes: true}:
    map fn entry:
      path = join dir, entry.name

      match entry:
        ?.isDirectory _: walk path
        else: [path]

    flatten



expand_source = fn file_or_dir:
  stat = statSync file_or_dir

  match stat:
    ?.isDirectory _:
      pipe walk file_or_dir:
        map fn src_path:
          {src_path, src_dir: file_or_dir}
    else:
      src_dir = dirname file_or_dir
      [{src_path: (join file_or_dir), src_dir}]



get_files = fn sources, out_dir, ignore=false, file_ext='.js':
  pipe sources:
    map expand_source ?

    flatten

    filter fn {src_path}:
      ends_with src_path, '.fnk'

    filter fn {src_path}:
      match ignore:
        false: true
        else: not minimatch src_path, join ignore

    map fn {src_path, src_dir}:
      rel_path = relative src_dir, src_path
      rel_dir = dirname rel_path
      name = basename src_path, '.fnk'

      out_path = match out_dir:
        false: false
        else: join out_dir, rel_dir, '${name}${file_ext}'

      {src_path, out_path, rel_path}
