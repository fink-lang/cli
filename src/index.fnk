#!/usr/bin/env node

{process} = import '@fink/js-interop/globals.fnk'
{is_empty, fold} = import '@fink/std-lib/iter.fnk'
yargs = import 'yargs'

{compile_all} = import './compile.fnk'
{logger} = import './logging.fnk'

{warn, error} = logger _


error_exit_code = -1



handle_compile = fn process, argv:
  compilation = compile_all
    process
    argv.src, argv.'out-dir', argv.ignore
    rec:
      source_maps: argv.'source-maps'
      module_type: argv.'module-type'
      module_ext: argv.'module-ext'

  {processed, errors} = pipe compilation:
    fold {processed: 0, errors: 0}, fn item, {processed, errors}:
      match item:
        {errors: is_empty ?}:
          {processed: processed + 1, errors}
        else:
          {errors: [{error: err, stack}]} = item
          error err, stack
          {processed: processed + 1, errors: errors + 1}

  warn '\nprocessed ${processed} file(s)'

  match errors:
    ? > 0: process.exit error_exit_code



main = fn process:
  [,, ...args] = process.argv

  {argv} = pipe yargs args:
    ?.parserConfiguration {'camel-case-expansion': false}
    ?.version false

    ?.usage '$0 --src file-or-dir [...] [--out-dir ouput-dir]'

    ?.option 'src', rec:
        array: true
        describe: 'The directory containing files to compile.'

    ?.option 'out-dir', rec:
        describe: 'The directory to generate code in.'
        default: false

    ?.option 'ignore', rec:
        describe: 'Glob paths/patterns for files to ignore'
        default: false

    ?.option 'source-maps', rec:
        describe: 'Generate sourcemaps'
        default: false

    ?.option 'module-type', rec:
        describe: 'Type of modules to generate (cjs|esm)'
        choices: ['cjs', 'esm']
        default: 'esm'

    ?.option 'module-ext', rec:
        describe: 'Extension to use for output files.'
        default: '.js'

    ?.help _

  handle_compile process, argv



# TODO: loxia should handle auto running main functions
main process

